name: Build Plugin Release

on:
  push:
    paths-ignore:
      - '.github/'
      - '!.github/workflows/**.yml'
      - 'LICENSE'
      - 'readme.txt'
      - '**.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '.github/'
      - '!.github/workflows/**.yml'
      - 'LICENSE'
      - 'readme.txt'
      - '**.md'
  workflow_dispatch:

jobs:
  build:
    name: 'Build Release'
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup NodeJS v16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn

      - name: Compile Assets
        run: |
          yarn --frozen-lockfile
          yarn run lint:scripts
          yarn run lint:styles
          yarn run build:production

      - name: Cache Composer Dependencies
        uses: actions/cache@v3
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer Dependencies
        uses: php-actions/composer@v6
        with:
          progress: 'yes'
          php_version: '7.3'
          command: update --optimize-autoloader

      - name: Composer Script - Lint PHP Files
        uses: php-actions/composer@v6
        with:
          php_version: '7.3'
          command: run-script lint:php

      - name: Composer Script - Build Archive
        uses: php-actions/composer@v6
        with:
          progress: 'yes'
          php_version: '7.3'
          command: run-script build:production

      - name: Upload build as artifact
        uses: actions/upload-artifact@v3
        with:
          name: plugin-build-php7.3
          path: pull-comments-other-pages.zip

  e2e-tests:
    name: 'E2E Testing'
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        php: ['7.3', '7.4', '8.0', '8.1']
        wordpress: ['5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0']
        exclude:
          - php: '7.3'
            wordpress: '6.0'
          - php: '8.0'
            wordpress: '5.4'
          - php: '8.0'
            wordpress: '5.5'
          - php: '8.1'
            wordpress: '5.4'
          - php: '8.1'
            wordpress: '5.5'
          - php: '8.1'
            wordpress: '5.6'
          - php: '8.1'
            wordpress: '5.7'

    services:
      mysql:
        image: mysql:5.7
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: wordpress
          MYSQL_USER: wpuser
          MYSQL_PASSWORD: ${{ secrets.MYSQL_DB_PASSWORD }}
        options: >-
          --name wordpress_mysql
          --health-cmd "mysql --user=wpuser --password=$MYSQL_PASSWORD --execute \"SHOW DATABASES LIKE 'wordpress';\""
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
      wordpress:
        image: wordpress:${{ matrix.wordpress }}-php${{ matrix.php }}-apache
        ports:
          - 80:80
        env:
          WORDPRESS_DB_HOST: wordpress_mysql
          MYSQL_DATABASE: wordpress
          MYSQL_USER: wpuser
          MYSQL_PASSWORD: ${{ secrets.MYSQL_DB_PASSWORD }}
        volumes:
          - wordpress:/var/www/html
        options: >-
          --name wordpress_core
          --health-cmd "bash -c \"[ -f /var/www/html/wp-config.php ]\""
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
      wpcli:
        image: kumaxim/wpcli-keep-running:cli-2.6-php7.4
        env:
          WORDPRESS_DB_HOST: wordpress_mysql
          MYSQL_DATABASE: wordpress
          MYSQL_USER: wpuser
          MYSQL_PASSWORD: ${{ secrets.MYSQL_DB_PASSWORD }}
        volumes:
          - wordpress:/var/www/html
        options: >-
          --name wp_cli
          --health-cmd "wp --info"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Download Build
        uses: actions/download-artifact@v3
        with:
          name: plugin-build-php7.3
          path: dist

      - name: Cache Composer Dependencies
        uses: actions/cache@v3
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer Dependencies
        uses: php-actions/composer@v6
        with:
          progress: 'yes'
          php_version: ${{ matrix.php }}
          command: update --optimize-autoloader

      - name: Generate .env usign Composer pre-defined script
        uses: php-actions/composer@v6
        env:
          CYPRESS_DASHBOARD_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
        with:
          php_version: ${{ matrix.php }}
          command: run-script env:generate

      - name: Create Enviroment Variables from .env
        id: dotenv
        uses: falti/dotenv-action@v0.2

      - name: Prepare WordPress Installation
        run: |
          docker cp wp-cli.yml wp_cli:/var/www/html/wp-cli.yml
          docker exec wordpress_core mkdir -p /var/www/html/wp-content/uploads/gh-src
          docker cp dist/pull-comments-other-pages.zip wp_cli:/var/www/html/wp-content/uploads/gh-src
          docker cp tests/dummy.xml wp_cli:/var/www/html/wp-content/uploads/gh-src

      - name: Install and Seed WordPress
        run: |
          MYSQL_WORDPRESS_SERVICE_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' wordpress_mysql)
          vendor/bin/wp --ssh=docker:xfs@wp_cli core config --dbhost=$MYSQL_WORDPRESS_SERVICE_IP --dbuser=wpuser --dbpass=${{ secrets.MYSQL_DB_PASSWORD }} --dbprefix=wp0l_
          vendor/bin/wp --ssh=docker:xfs@wp_cli core install --admin_password=${{ steps.dotenv.outputs.WP_ADMIN_PASSWORD }}
          vendor/bin/wp --ssh=docker:xfs@wp_cli plugin install wordpress-importer --activate
          vendor/bin/wp --ssh=docker:xfs@wp_cli plugin install wp-content/uploads/gh-src/pull-comments-other-pages.zip --activate
          vendor/bin/wp --ssh=docker:xfs@wp_cli post delete $(vendor/bin/wp --ssh=docker:xfs@wp_cli post list --format=ids) --force
          vendor/bin/wp --ssh=docker:xfs@wp_cli post delete $(vendor/bin/wp --ssh=docker:xfs@wp_cli post list --post_type=page --format=ids) --force
          vendor/bin/wp --ssh=docker:xfs@wp_cli import wp-content/uploads/gh-src/dummy.xml
          vendor/bin/wp --ssh=docker:xfs@wp_cli theme install twentytwenty --activate
          vendor/bin/wp --ssh=docker:xfs@wp_cli widget delete $(vendor/bin/wp --ssh=docker:xfs@wp_cli widget list sidebar-1 --format=ids)
          vendor/bin/wp --ssh=docker:xfs@wp_cli post update $(vendor/bin/wp --ssh=docker:xfs@wp_cli post list --post_type=page --format=ids) --comment_status=open
          vendor/bin/wp --ssh=docker:xfs@wp_cli user meta update wpadmin show_admin_bar_front false

      - name: Verify WordPress Installation
        run: |
          curl -f -LI http://localhost/
          if ! vendor/bin/wp --ssh=docker:xfs@wp_cli core is-installed; then echo "WordPress was not installed"; exit 127; fi

      - name: Run End2End Tests
        uses: cypress-io/github-action@v4
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          record: ${{ github.ref == 'refs/heads/master' }}
          tag: wordpress-${{ matrix.wordpress }},php-${{ matrix.php }}
          install-command: yarn --frozen-lockfile --silent
          wait-on: 'http://localhost/'
          browser: 'chrome'

      - name: Upload Cypress Screenshots as Artifact
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-errors-screenshots-php-${{ matrix.php }}-wordpress-${{ matrix.wordpress }}
          path: tests/cypress/screenshots

      - name: Upload Cypress Videos as Artifact
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: cypress-videos-php-${{ matrix.php }}-wordpress-${{ matrix.wordpress }}
          path: tests/cypress/videos

  publish:
    name: 'Create GitHub Release'
    needs: [e2e-tests]
    runs-on: ubuntu-latest

    steps:
      - name: Download Build
        uses: actions/download-artifact@v3
        with:
          name: plugin-build-php7.3
          path: dist

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          name: 'Draft Build: #${{ github.sha }}'
          files: 'dist/pull-comments-other-pages.zip'
          draft: true
